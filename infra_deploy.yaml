AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation template that builds end to end Object demo Pipeline with security best practices'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCSelect
          - SubnetSelect
          - SGSelect
      - Label:
          default: Job Configuration
        Parameters:
          - ENVFargatetype
          - MaxCPUs
          - JobVCPUs
          - JobMemory
      - Label:
          default: Notify Configuration
        Parameters:
          - RestoreNotification
    ParameterLabels:
      ProjectName:
        default: test
      VPCSelect:
        default: Select the VPC to deploy
      SubnetSelect:
        default: Select the Subnets
      SGSelect:
        default: Select the Security Groups
      ENVFargatetype:
        default: Select the Environment Type you like to execute
      MaxCPUs:
        default: Enter Max CPUs to be used
      JobVCPUs:
        default: Enter the number of vCPUs to be used for a Job
      JobMemory:
        default: Enter memory to be used for a Job
      RestoreNotification:
        default: Enter your Valid Email ID to Notify

Parameters:
  ProjectName:
    Type: String
    Description: Provide Project name
    Default: 'demo'
  VPCSelect:
    Description: Select VPC
    Type: List<AWS::EC2::VPC::Id>
  SubnetSelect:
    Description: Select Subnets
    Type: List<AWS::EC2::Subnet::Id>
  SGSelect:
    Description: Select Security group
    Type: List<AWS::EC2::SecurityGroup::Id>
  JobVCPUs:
    Description: Enter number of vCPUs for a Job
    Type: String
    AllowedValues:
      - 0.25
      - 0.5
      - 1
      - 2
      - 4
    Default: 1
  JobMemory:
    Description: Enter Memory(GB) required for a Job
    Type: String
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
    Default: 2048
  MaxCPUs:
    Description: Max vCPU Allowed for concurrency
    Type: String
    Default: 10
  ENVFargatetype:
    Description: Select OnDemand or Spot Farget
    Type: String
    AllowedValues:
      - FARGATE
      - FARGATE_SPOT
    Default: FARGATE
  RestoreNotification:
    Description: Email address to notify on successful restoration of the files
    Type: String

Resources:
  # KMS Keys for encryption
  S3LoggingKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for S3 bucket encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
            
    
  DynamoDBKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for DynamoDB encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'

  LogKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for CloudWatch Logs encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'

  SNSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for SNS encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'

  # S3 Logging Bucket
  ArchiveLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}-logs'
      OwnershipControls:
        Rules:
         - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
          DestinationBucketName: !Ref LoggingMonitorBucket
          LogFilePrefix: access-logs/
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref S3LoggingKey

  # bucket for monitoring the logging bucket
  LoggingMonitorBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}-monitor'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref S3LoggingKey
      LoggingConfiguration:                                
        DestinationBucketName: !Ref LoggingMonitorBucket   
        LogFilePrefix: audit/
    
  ArchiveLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArchiveLoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-logs
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-logs/*
            Condition:
              Bool:
                aws:SecureTransport: false

  LoggingMonitorBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingMonitorBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-monitor
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-monitor/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # VPC Endpoints for secure communication
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-*
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-*/*
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Select [0, !Ref VPCSelect]
      VpcEndpointType: Gateway
      RouteTableIds:
        - !ImportValue PrivateRouteTable1
        - !ImportValue PrivateRouteTable2

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !GetAtt ArchiveMasterTable.Arn
              - !GetAtt RestoreTrackerTable.Arn
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Select [0, !Ref VPCSelect]
      VpcEndpointType: Gateway
      RouteTableIds:
        - !ImportValue PrivateRouteTable1
        - !ImportValue PrivateRouteTable2

  # ECR Repositories with immutable tags
  ArchiveMasterRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-archivemaster
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !GetAtt S3LoggingKey.Arn

  ArchiverRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}_archiver
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !GetAtt S3LoggingKey.Arn

  RestorerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}_restorer
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !GetAtt S3LoggingKey.Arn
  # SQS queue for the DLQ
  LambdaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-lambda-dlq
      KmsMasterKeyId: !Ref SNSKey  # Reuse the SNS KMS key for encryption
      MessageRetentionPeriod: 1209600  # 14 days (maximum retention)

  LambdaEnvKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for Lambda environment variables encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
               AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 
              - kms:CreateAlias
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:EnableKey
              - kms:ListGrants
              - kms:PutKeyPolicy
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Principal:
             Service: lambda.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'

  # Lambda Functions with VPC configuration
  ArchiveLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'archive-lambda'
      ReservedConcurrentExecutions: 10
      Handler: archive-lambda.lambda_handler
      Runtime: python3.12
      Timeout: 300
      Code: ./api-gateway-lambda/archive-lambda/
      Role: !GetAtt ArchiveLambdaRole.Arn
      VpcConfig:
        SubnetIds: !Ref SubnetSelect
        SecurityGroupIds: !Ref SGSelect
      Environment:
        Variables:
          JOB_QUEUE: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref ArchiveMasterQueue]]]]
          JOB_DEFINITION: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref ArchiveMasterJD]]]]
      KmsKeyArn: !GetAtt LambdaEnvKey.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDeadLetterQueue.Arn 

  RestoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'restore-lambda'
      ReservedConcurrentExecutions: 10
      Handler: restore-lambda.lambda_handler
      Runtime: python3.12
      Timeout: 300
      Code: ./api-gateway-lambda/restore-lambda/
      Role: !GetAtt RestoreLambdaRole.Arn
      VpcConfig:
        SubnetIds: !Ref SubnetSelect
        SecurityGroupIds: !Ref SGSelect
      Environment:
        Variables:
          JOB_QUEUE: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref RestorerQueue]]]]
          JOB_DEFINITION: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref RestorerJD]]]]
          TOPIC_ARN: !Ref RestoreNotify
      KmsKeyArn: !GetAtt LambdaEnvKey.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDeadLetterQueue.Arn 

  # IAM Roles with least privilege
  ArchiveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ArchiveLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                Resource: 
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/${ProjectName}*
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/${ProjectName}*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/archive-lambda:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                
  RestoreLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RestoreLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                Resource: 
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/${ProjectName}*
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/${ProjectName}*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src/*
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest/*
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt ArchiveMasterTable.Arn
                  - !GetAtt RestoreTrackerTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref RestoreNotify
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/restore-lambda:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/* 
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: 
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src/*
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest/*
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore
                  - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt ArchiveMasterTable.Arn
                  - !GetAtt RestoreTrackerTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref RestoreNotify
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Resource:
                  - !GetAtt ArchiveMasterRepo.Arn
                  - !GetAtt ArchiverRepo.Arn
                  - !GetAtt RestorerRepo.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/batch/*

  # Batch Compute Environments
  ArchiveMasterEnv:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: 'archive-master-env'
      ComputeResources:
        Type: !Ref ENVFargatetype
        MaxvCpus: !Ref MaxCPUs
        Subnets: !Ref SubnetSelect
        SecurityGroupIds: !Ref SGSelect
      ServiceRole: !GetAtt BatchServiceRole.Arn
      State: ENABLED
      Type: MANAGED

  ArchiverEnv:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: archiver-env
      ComputeResources:
        Type: !Ref ENVFargatetype
        MaxvCpus: !Ref MaxCPUs
        Subnets: !Ref SubnetSelect
        SecurityGroupIds: !Ref SGSelect
      ServiceRole: !GetAtt BatchServiceRole.Arn
      State: ENABLED
      Type: MANAGED

  RestorerEnv:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: restorer-env
      ComputeResources:
        Type: !Ref ENVFargatetype
        MaxvCpus: !Ref MaxCPUs
        Subnets: !Ref SubnetSelect
        SecurityGroupIds: !Ref SGSelect
      ServiceRole: !GetAtt BatchServiceRole.Arn
      State: ENABLED
      Type: MANAGED

  # Batch Job Queues
  ArchiveMasterQueue:
    DependsOn: ArchiveMasterEnv
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: archive-master-env
          Order: 1
      JobQueueName: 'archive-master-queue'
      Priority: 1

  ArchiverQueue:
    DependsOn: ArchiverEnv
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: archiver-env
          Order: 1
      JobQueueName: archiver-queue
      Priority: 1

  RestorerQueue:
    DependsOn: RestorerEnv
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: restorer-env
          Order: 1
      JobQueueName: 'restorer-queue'
      Priority: 1

  # Batch Job Definitions
  ArchiveMasterJD:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Image: !GetAtt ArchiveMasterRepo.RepositoryUri
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: VCPU
            Value: !Ref JobVCPUs
          - Type: MEMORY
            Value: !Ref JobMemory
        ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
        JobRoleArn: !GetAtt TaskExecutionRole.Arn
        Environment:
          - Name: JOB_DEFINITION
            Value: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref ArchiverJD]]]]
          - Name: JOB_QUEUE
            Value: !Select [1, !Split ["/", !Select [5, !Split [":", !Ref ArchiverQueue]]]]
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      JobDefinitionName: 'archive-master-jd'
      PlatformCapabilities:
        - FARGATE
      Type: container

  ArchiverJD:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Image: !GetAtt ArchiverRepo.RepositoryUri
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: VCPU
            Value: !Ref JobVCPUs
          - Type: MEMORY
            Value: !Ref JobMemory
        Environment:
          - Name: AWS_REGION
            Value: !Ref AWS::Region
        ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
        JobRoleArn: !GetAtt TaskExecutionRole.Arn
      JobDefinitionName: archiver-jd
      PlatformCapabilities:
        - FARGATE
      Type: container

  RestorerJD:
    DependsOn: BatchServiceRole
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Image: !GetAtt RestorerRepo.RepositoryUri
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: VCPU
            Value: !Ref JobVCPUs
          - Type: MEMORY
            Value: !Ref JobMemory
        ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
        JobRoleArn: !GetAtt TaskExecutionRole.Arn
      JobDefinitionName: 'restorer-jd'
      PlatformCapabilities:
        - FARGATE
      Type: container

  # API Gateway with Cognito Authorizer
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OPTIONAL"
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-app-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ObjectdemoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Object demo API
      Description: API used for Object demo
      FailOnWarnings: true

  ObjectdemoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ObjectdemoApi
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  ObjectdemoUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ObjectdemoApi
          Stage: !Ref ObjectdemoApiStage
      Description: Object demo default usage plan
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt ArchiveLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref ObjectdemoApi
          - /*

  RestoreLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt RestoreLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref ObjectdemoApi
          - /*

  ObjectdemoCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/*

  ObjectdemoAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ObjectdemoCloudWatchLogsRole.Arn

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      KmsKeyId: !Ref LogKey

  ObjectdemoApiStage:
    DependsOn:
      - ObjectdemoAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
          CachingEnabled: true
          CacheTtlInSeconds: 300
          CacheDataEncrypted: true
      CacheClusterEnabled: true
      CacheClusterSize: "0.5" 
      RestApiId: !Ref ObjectdemoApi
      StageName: LATEST
      TracingEnabled: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ArchiveRequest
      - RestoreRequest
    Properties:
      RestApiId: !Ref ObjectdemoApi
      StageName: live

  ArchiveResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ObjectdemoApi
      ParentId: !GetAtt ObjectdemoApi.RootResourceId
      PathPart: archive

  ArchiveRequest:
    DependsOn: Permission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ObjectdemoAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref AWS::Region
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt ArchiveLambda.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref ArchiveResource
      RestApiId: !Ref ObjectdemoApi
      MethodResponses:
        - StatusCode: 200

  RestoreResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ObjectdemoApi
      ParentId: !GetAtt ObjectdemoApi.RootResourceId
      PathPart: restore

  RestoreRequest:
    DependsOn: RestoreLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ObjectdemoAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref AWS::Region
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt RestoreLambda.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref RestoreResource
      RestApiId: !Ref ObjectdemoApi
      MethodResponses:
        - StatusCode: 200

  # S3 Buckets with encryption, logging, and TLS enforcement
  ArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}-src'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref ArchiveLoggingBucket
        LogFilePrefix: access-log/src/
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref S3LoggingKey

  ArchiveBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArchiveBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-src/*
            Condition:
              Bool:
                aws:SecureTransport: false

  DestArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref ArchiveLoggingBucket
        LogFilePrefix: access-log/dest/
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref S3LoggingKey

  DestArchiveBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DestArchiveBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-dest/*
            Condition:
              Bool:
                aws:SecureTransport: false

  RestoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref ArchiveLoggingBucket
        LogFilePrefix: access-log/restore/
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref S3LoggingKey

  RestoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RestoreBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore
              - !Sub arn:aws:s3:::${ProjectName}-${AWS::AccountId}-${AWS::Region}-restore/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # DynamoDB Tables with KMS encryption and PITR
  ArchiveMasterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}_archive_master
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref DynamoDBKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH

  RestoreTrackerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}_restore_track
      BillingMode: PROVISIONED
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref DynamoDBKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: archive_key
          AttributeType: S
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: archive_key
          KeyType: HASH
        - AttributeName: key
          KeyType: RANGE

  # SNS Topic with KMS encryption
  RestoreNotify:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Ref SNSKey
      Subscription:
        - Endpoint: !Ref RestoreNotification
          Protocol: email

Outputs:
  RootUrl:
    Description: Root URL of the Object demo API
    Value: !Join
      - ''
      - - https://
        - !Ref ObjectdemoApi
        - .execute-api.
        - !Ref AWS::Region
        - .amazonaws.com
  CognitoUserPoolId:
    Description: Cognito User Pool ID for API authentication
    Value: !Ref CognitoUserPool
  CognitoAppClientId:
    Description: Cognito App Client ID for API authentication
    Value: !Ref CognitoUserPoolClient